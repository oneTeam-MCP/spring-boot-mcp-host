name: App CI/CD (EC2 Rolling)

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions: { contents: read }
    env:
      IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/oneteam-mcp
      TAG: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - uses: gradle/actions/setup-gradle@v3

      - run: chmod +x gradlew
      - run: ./gradlew clean build

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Debug TAG
        run: echo "IMAGE=$IMAGE, TAG=$TAG"

      - name: Build image
        run: docker build -t $IMAGE:latest -t $IMAGE:$TAG .

      - name: Push image
        run: |
          docker push $IMAGE:latest
          docker push $IMAGE:$TAG

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Prepare remote folder & network
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            mkdir -p /home/ubuntu/host
            docker network create proxy || true

      - name: Upload compose
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "docker-compose.yml"
          target: "/home/ubuntu/host/"

      - name: Create .env on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cat > /home/ubuntu/host/.env << EOF
            DB_URL=${{ secrets.DB_URL }}
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}
            BRAVE_API_KEY=${{ secrets.BRAVE_API_KEY }}
            SEQUENTIAL_ST_KEY=${{ secrets.SEQUENTIAL_ST_KEY }}
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            IMAGE_TAG=${{ github.sha }}
            EOF
            chmod 600 /home/ubuntu/host/.env

      - name: Docker login on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            echo '${{ secrets.DOCKERHUB_PASSWORD }}' | docker login -u '${{ secrets.DOCKERHUB_USERNAME }}' --password-stdin

      - name: Pull & Up
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            cd /home/ubuntu/host
            docker compose pull app
            docker compose up -d --remove-orphans --force-recreate app
            for i in {1..30}; do
              curl -fsS http://127.0.0.1:18080/actuator/health | grep -q '"status":"UP"' && ok=1 && break
              sleep 3
            done
            test "$ok" = "1" || (echo "Healthcheck failed" && exit 1)
            docker image prune -f
